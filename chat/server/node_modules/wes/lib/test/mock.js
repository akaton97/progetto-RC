"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MockDeclarativeEvent = exports.MockDeclarativeCondition = exports.MockDeclarativeAction = exports.MockListener = exports.MockEvent = exports.MockAPI = void 0;

var _filter = _interopRequireDefault(require("lodash/filter"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _remove = _interopRequireDefault(require("lodash/remove"));

var _base = _interopRequireDefault(require("../core/base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MockAPI =
/*#__PURE__*/
function (_Base) {
  _inherits(MockAPI, _Base);

  function MockAPI() {
    _classCallCheck(this, MockAPI);

    return _possibleConstructorReturn(this, (MockAPI.__proto__ || Object.getPrototypeOf(MockAPI)).apply(this, arguments));
  }

  return MockAPI;
}(_base.default);

exports.MockAPI = MockAPI;
Object.defineProperty(MockAPI, "Title", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'Mock'
});
Object.defineProperty(MockAPI, "Name", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'mock'
});

var MockEvent =
/*#__PURE__*/
function () {
  function MockEvent() {
    _classCallCheck(this, MockEvent);

    this._listeners = [];
  }

  _createClass(MockEvent, [{
    key: "emit",
    value: function emit() {
      for (var i = 0; i < this._listeners.length; i++) {
        var _listeners;

        (_listeners = this._listeners)[i].apply(_listeners, arguments);
      }
    }
  }, {
    key: "addListener",
    value: function addListener(listener) {
      this._listeners.push(listener);
    }
  }, {
    key: "hasListener",
    value: function hasListener(listener) {
      return this._listeners.indexOf(listener) >= 0;
    }
  }, {
    key: "hasListeners",
    value: function hasListeners() {
      return this._listeners.length > 0;
    }
  }, {
    key: "removeListener",
    value: function removeListener(listener) {
      var index = this._listeners.indexOf(listener);

      if (index < 0) {
        return;
      }

      this._listeners.splice(index, 1);
    }
  }]);

  return MockEvent;
}();

exports.MockListener = exports.MockEvent = MockEvent;

var MockDeclarativeAction = function MockDeclarativeAction() {
  _classCallCheck(this, MockDeclarativeAction);
};

exports.MockDeclarativeAction = MockDeclarativeAction;

var MockDeclarativeCondition = function MockDeclarativeCondition() {
  _classCallCheck(this, MockDeclarativeCondition);
};

exports.MockDeclarativeCondition = MockDeclarativeCondition;

var MockDeclarativeEvent =
/*#__PURE__*/
function (_MockEvent) {
  _inherits(MockDeclarativeEvent, _MockEvent);

  function MockDeclarativeEvent() {
    var _this;

    _classCallCheck(this, MockDeclarativeEvent);

    _this = _possibleConstructorReturn(this, (MockDeclarativeEvent.__proto__ || Object.getPrototypeOf(MockDeclarativeEvent)).call(this));
    _this._rules = [];
    return _this;
  }

  _createClass(MockDeclarativeEvent, [{
    key: "addRules",
    value: function addRules(rules, callback) {
      var _rules;

      // Ensure `rules` is an error
      if ((0, _isNil.default)(rules) || !Array.isArray(rules)) {
        return Promise.reject(new Error('Invalid value provided for the "rules" parameter (expected an array of plain objects)'));
      } // Validate `rules`


      if (!this._isValidRules(rules)) {
        return Promise.reject(new Error('Invalid value provided for the "rules" parameter (expected an array of plain objects)'));
      } // Add rules to the event


      (_rules = this._rules).push.apply(_rules, _toConsumableArray(rules)); // Fire callback (if defined)


      if ((0, _isFunction.default)(callback)) {
        callback(rules);
        return null;
      } // Return promise


      return Promise.resolve(rules);
    }
  }, {
    key: "getRules",
    value: function getRules() {
      var ruleIdentifiers;
      var callback;

      if (arguments.length === 1) {
        callback = arguments.length <= 0 ? undefined : arguments[0];
      } else if (arguments.length === 2) {
        ruleIdentifiers = arguments.length <= 0 ? undefined : arguments[0];
        callback = arguments.length <= 1 ? undefined : arguments[1];
      } else {
        throw new Error('Invalid arguments');
      } // Retrieve rules


      var rules = this._rules; // Filter by `ruleIdentifiers` (if provided)

      if (!(0, _isNil.default)(ruleIdentifiers)) {
        rules = (0, _filter.default)(rules, function (rule) {
          return !(0, _isNil.default)(rule.id) && ruleIdentifiers.indexOf(rule.id) >= 0;
        });
      } // Fire callback (if defined)


      if ((0, _isFunction.default)(callback)) {
        callback(rules);
        return null;
      } // Return promise


      return Promise.resolve(rules);
    }
  }, {
    key: "removeRules",
    value: function removeRules(ruleIdentifiers, callback) {
      // Remove rules
      (0, _remove.default)(this._rules, function (rule) {
        return !(0, _isNil.default)(rule.id) && ruleIdentifiers.indexOf(rule.id) >= 0;
      }); // Fire callback (if defined)

      if ((0, _isFunction.default)(callback)) {
        callback();
        return null;
      } // Return promise


      return Promise.resolve();
    }
  }, {
    key: "_isValidRules",
    value: function _isValidRules(rules) {
      for (var i = 0; i < rules.length; i++) {
        if (!this._isValidRule(rules[i])) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "_isValidRule",
    value: function _isValidRule(rule) {
      if (!(0, _isPlainObject.default)(rule)) {
        return false;
      } // Validate `rule.actions`


      for (var i = 0; i < (rule.actions || []).length; i++) {
        if (!(rule.actions[i] instanceof MockDeclarativeAction)) {
          return false;
        }
      } // Validate `rule.conditions`


      for (var _i = 0; _i < (rule.conditions || []).length; _i++) {
        if (!(rule.conditions[_i] instanceof MockDeclarativeCondition)) {
          return false;
        }
      }

      return true;
    }
  }]);

  return MockDeclarativeEvent;
}(MockEvent);

exports.MockDeclarativeEvent = MockDeclarativeEvent;