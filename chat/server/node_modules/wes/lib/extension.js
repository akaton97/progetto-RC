"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ExtensionCompatibility", {
  enumerable: true,
  get: function get() {
    return _extension.default;
  }
});
exports.default = exports.Extension = exports.ViewType = void 0;

var _extension = _interopRequireDefault(require("mdn-browser-compat-data/webextensions/api/extension.json"));

var _base = _interopRequireDefault(require("./core/base"));

var _event = _interopRequireDefault(require("./core/event"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Extension Error.
 *
 * @see {@link https://developer.chrome.com/extensions/extension#property-lastError}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/lastError}
 *
 * @typedef {Object} Extension~Error
 *
 * @property {String} message - Description of the error that has taken place.
 */

/**
 * Fetch properties for {@link Extension~getViews}.
 *
 * @see {@link https://developer.chrome.com/extensions/extension#method-getViews}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/getViews}
 *
 * @typedef {Object} Extension~FetchProperties
 *
 * @property {String} [type]     - {@link ViewType} indicating the type of view to get.
 * @property {Number} [windowId] - The window to restrict the search to.
 */

/**
 * The type of extension view.
 *
 * @see {@link https://developer.chrome.com/extensions/extension#type-ViewType}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/ViewType}
 *
 * @enum {String}
 */
var ViewType = {
  Notification: 'notification',
  Popup: 'popup',
  Tab: 'tab'
};
/**
 * Utilities related to your extension. Get URLs to resources packages with your extension, get
 * the `Window` object for your extension's pages, get the values for various settings. Note that
 * the messaging APIs in this module are deprecated in favor of the equivalent APIs in the
 * `runtime` module.
 *
 * @see {@link https://developer.chrome.com/extensions/extension}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension}
 */

exports.ViewType = ViewType;

var Extension =
/*#__PURE__*/
function (_Base) {
  _inherits(Extension, _Base);

  function Extension() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, Extension);

    _this = _possibleConstructorReturn(this, (Extension.__proto__ || Object.getPrototypeOf(Extension)).call(this, options)); // region Events

    /**
     * Fired when a request is sent from either an extension process or a content script.
     *
     * @deprecated Deprecated, use `runtime.onMessage` instead.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#event-onRequest}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/onRequest}
     *
     * @returns {Event}
     */

    _this.onRequest = new _event.default(_this, 'onRequest');
    /**
     * Fired when a request is sent from another extension.
     *
     * @deprecated Deprecated, use `runtime.onMessageExternal` instead.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#event-onRequestExternal}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/onRequestExternal}
     *
     * @returns {Event}
     */

    _this.onRequestExternal = new _event.default(_this, 'onRequestExternal'); // endregion

    return _this;
  }
  /**
   * True for content scripts running inside incognito tabs, and for extension pages running
   * inside an incognito process. The latter only applies to extensions with 'split'
   * incognito_behavior.
   *
   * @see {@link https://developer.chrome.com/extensions/extension#property-inIncognitoContext}
   * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/inIncognitoContext}
   *
   * @returns { Boolean }
   */


  _createClass(Extension, [{
    key: "getBackgroundPage",

    /**
     * Returns the `Window` object for the background page running inside the current extension. Returns null
     * if the extension has no background page.
     *
     * An alias for `runtime.getBackgroundPage()`.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-getBackgroundPage}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/getBackgroundPage}
     *
     * @returns {Window} Window of the background page.
     */
    value: function getBackgroundPage() {
      return this.$call('getBackgroundPage');
    }
    /**
     * Returns an array of the JavaScript `Window` objects for each of the tabs running inside the
     * current extension. If `windowId` is specified, returns only the `Window` objects of tabs
     * attached to the specified window.
     *
     * @deprecated Deprecated, use `extension.getViews` instead.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-getExtensionTabs}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/getExtensionTabs}
     *
     * @param {Number} [windowId]
     *
     * @returns {Window[]} Array of global window objects
     */

  }, {
    key: "getExtensionTabs",
    value: function getExtensionTabs(windowId) {
      return this.$call('getExtensionTabs', windowId);
    }
    /**
     * Converts a relative path within an extension install directory to a fully-qualified URL.
     *
     * @deprecated Deprecated, use `runtime.getURL` instead.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-getURL}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/getURL}
     *
     * @param {String} path A path to a resource within an extension expressed relative to its install directory.
     *
     * @returns {String} The fully-qualified URL to the resource.
     */

  }, {
    key: "getURL",
    value: function getURL(path) {
      return this.$call('getURL', path);
    }
    /**
     * Returns an array of the `Window` objects for each of the pages running inside the current extension.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-getViews}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/getViews}
     *
     * @param {...Extension~FetchProperties} [fetchProperties]
     *
     * @returns {Window[]} Array of `Window` objects.
     */

  }, {
    key: "getViews",
    value: function getViews(fetchProperties) {
      return this.$call('getViews', fetchProperties);
    }
    /**
     * Retrieves the state of the extension's access to the 'file://' scheme (as determined by the
     * user-controlled 'Allow access to File URLs' checkbox). True if the extension is allowed access
     * to "file://" URLs, false otherwise.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-isAllowedFileSchemeAccess}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/isAllowedFileSchemeAccess}
     *
     * @returns {Promise} A `Promise` that will be fulfilled with a boolean
     */

  }, {
    key: "isAllowedFileSchemeAccess",
    value: function isAllowedFileSchemeAccess() {
      return this.$promise('isAllowedFileSchemeAccess');
    }
    /**
     * Retrieves the state of the extension's access to Incognito-mode (as determined by the
     * user-controlled 'Allowed in Incognito' checkbox). True if the extension is allowed access
     * to private tabs, false otherwise.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-isAllowedIncognitoAccess}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/isAllowedIncognitoAccess}
     *
     * @returns {Promise} A `Promise` that will be fulfilled with a boolean
     */

  }, {
    key: "isAllowedIncognitoAccess",
    value: function isAllowedIncognitoAccess() {
      return this.$promise('isAllowedIncognitoAccess');
    }
    /**
     * Sends a single request to other listeners within the extension. Similar to `runtime.connect`,
     * but only sends a single request with an optional response. The `extension.onRequest` event is
     * fired in each page of the extension.
     *
     * @deprecated Deprecated, use `runtime.sendMessage` instead.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-sendRequest}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/sendRequest}
     *
     * @param {String} [extensionId] The extension ID of the extension you want to connect to.
     * @param {Object} request Request Message
     * @param {Function} [responseCallback] Function(response)
     */

  }, {
    key: "sendRequest",
    value: function sendRequest(extensionId, request, responseCallback) {
      this.$call('sendRequest', extensionId, request, responseCallback);
    }
    /**
     * Sets parameters for the extension's update URL. This value is ignored for extensions that are hosted
     * in the browser vendor's store.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#method-setUpdateUrlData}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/setUpdateUrlData}
     *
     * @param {String} data
     */

  }, {
    key: "setUpdateUrlData",
    value: function setUpdateUrlData(data) {
      this.$call('setUpdateUrlData', data);
    }
  }, {
    key: "inIncognitoContext",
    get: function get() {
      return this.$property('inIncognitoContext');
    }
    /**
     * Set for the lifetime of a callback if an asynchronous extension api has resulted in
     * an error. If no error has occurred lastError will be `undefined`.
     *
     * @deprecated Deprecated, use `runtime.lastError` instead.
     *
     * @see {@link https://developer.chrome.com/extensions/extension#property-lastError}
     * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/lastError}
     *
     * @returns {...Extension~Error} Error
     */

  }, {
    key: "lastError",
    get: function get() {
      return this.$property('lastError');
    }
  }]);

  return Extension;
}(_base.default);

exports.Extension = Extension;
Object.defineProperty(Extension, "Title", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'Extension'
});
Object.defineProperty(Extension, "Name", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'extension'
});
Object.defineProperty(Extension, "Compatibility", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: _extension.default
});

var _default = new Extension();

exports.default = _default;