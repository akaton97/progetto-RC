"use strict";

var _contentScripts = require("./contentScripts");

describe('RegisteredContentScript', function () {
  describe('Chrome', function () {
    var contentScript = new _contentScripts.RegisteredContentScript(null, {
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false
      }
    });
    describe('unregister', function () {
      it('should throw an error', function () {
        expect(function () {
          return contentScript.unregister();
        }).toThrowError(Error, 'contentScripts is not available');
      });
    });
  });
  describe('Firefox', function () {
    var contentScript = new _contentScripts.RegisteredContentScript({
      unregister: function unregister() {
        return true;
      }
    }, {
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    });
    describe('unregister', function () {
      it('should be callable', function () {
        contentScript.unregister();
      });
    });
  });
});
describe('ContentScripts', function () {
  describe('Chrome', function () {
    var contentScripts = new _contentScripts.ContentScripts({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: true,
        namespace: {}
      }
    });
    describe('register', function () {
      it('should reject with unsupported error', function (done) {
        contentScripts.register({
          matches: ['*://test/*']
        }).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('contentScripts is not available');
          done();
        });
      });
    });
  });
  describe('Firefox', function () {
    var contentScripts = new _contentScripts.ContentScripts({
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true,
        namespace: {
          contentScripts: {
            register: function register(contentScriptOptions) {
              return Promise.resolve(contentScriptOptions);
            }
          }
        }
      }
    });
    describe('register', function () {
      it('should return instance', function () {
        return contentScripts.register({
          matches: ['*://test/*']
        }).then(function (contentScript) {
          expect(contentScript instanceof _contentScripts.RegisteredContentScript).toBeTruthy();
          expect(contentScript.$target.matches).toEqual(['*://test/*']);
        });
      });
      it('should return null', function () {
        return contentScripts.register().then(function (contentScript) {
          expect(contentScript).toBeNull();
        });
      });
    });
  });
});