"use strict";

var _mock = require("../test/mock");

var _port = require("./port");

describe('MessageSender', function () {
  describe('Chrome', function () {
    var sender = new _port.MessageSender({
      tab: 'tab',
      frameId: 'frameId',
      id: 'id',
      url: 'url',
      tlsChannelId: 'tlsChannelId'
    }, {
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false
      }
    }); // region Properties

    describe('tab', function () {
      it('should return value', function () {
        expect(sender.tab).toBe('tab');
      });
    });
    describe('frameId', function () {
      it('should return value', function () {
        expect(sender.frameId).toBe('frameId');
      });
    });
    describe('id', function () {
      it('should return value', function () {
        expect(sender.id).toBe('id');
      });
    });
    describe('url', function () {
      it('should return value', function () {
        expect(sender.url).toBe('url');
      });
    });
    describe('tlsChannelId', function () {
      it('should return value', function () {
        expect(sender.tlsChannelId).toBe('tlsChannelId');
      });
    }); // endregion
  });
  describe('Firefox', function () {
    var sender = new _port.MessageSender({
      tab: 'tab',
      frameId: 'frameId',
      id: 'id',
      url: 'url',
      tlsChannelId: 'tlsChannelId'
    }, {
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    }); // region Properties

    describe('tab', function () {
      it('should return value', function () {
        expect(sender.tab).toBe('tab');
      });
    });
    describe('frameId', function () {
      it('should return value', function () {
        expect(sender.frameId).toBe('frameId');
      });
    });
    describe('id', function () {
      it('should return value', function () {
        expect(sender.id).toBe('id');
      });
    });
    describe('url', function () {
      it('should return value', function () {
        expect(sender.url).toBe('url');
      });
    });
    describe('tlsChannelId', function () {
      it('should return value', function () {
        expect(sender.tlsChannelId).toBe('tlsChannelId');
      });
    }); // endregion
  });
});
describe('Port', function () {
  describe('Chrome', function () {
    var onDisconnect = new _mock.MockListener();
    var onMessage = new _mock.MockListener();
    var port = new _port.Port({
      name: 'name',
      sender: {
        id: 'id'
      },
      onDisconnect: onDisconnect,
      onMessage: onMessage,
      disconnect: function disconnect() {
        return false;
      },
      postMessage: function postMessage() {
        return false;
      }
    }, {
      title: 'Chrome',
      name: 'chrome',
      version: '54.0',
      promises: false
    }); // region Properties

    describe('name', function () {
      it('should return value', function () {
        expect(port.name).toBe('name');
      });
    });
    describe('sender', function () {
      it('should return value', function () {
        expect(port.sender).toBeDefined();
        expect(port.sender.id).toBe('id');
      });
      it('should return null if "sender" is undefined', function () {
        var port = new _port.Port({
          sender: null
        }, {
          title: 'Chrome',
          name: 'chrome',
          version: '54.0',
          promises: false
        });
        expect(port.sender).toBeNull();
      });
    }); // endregion
    // region Events

    describe('onDisconnect', function () {
      it('supports addListener(listener)', function (done) {
        function listener(port) {
          expect(port).toBe('port');
          done();
        } // Add listener


        port.onDisconnect.addListener(listener); // Emit event

        onDisconnect.emit('port');
      });
    });
    describe('onMessage', function () {
      it('supports addListener(listener)', function (done) {
        function listener(message) {
          expect(message).toBe('message');
          done();
        } // Add listener


        port.onMessage.addListener(listener); // Emit event

        onMessage.emit('message');
      });
    }); // endregion
    // region Methods

    describe('disconnect', function () {
      it('should call function', function () {
        port.disconnect();
      });
    });
    describe('postMessage', function () {
      it('should call function', function () {
        port.postMessage('message');
      });
    }); // endregion
  });
  describe('Firefox', function () {
    var onDisconnect = new _mock.MockListener();
    var onMessage = new _mock.MockListener();
    var port = new _port.Port({
      name: 'name',
      error: 'error',
      sender: {
        id: 'id'
      },
      onDisconnect: onDisconnect,
      onMessage: onMessage,
      disconnect: function disconnect() {
        return false;
      },
      postMessage: function postMessage() {
        return false;
      }
    }, {
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    }); // region Properties

    describe('name', function () {
      it('should return value', function () {
        expect(port.name).toBe('name');
      });
    });
    describe('error', function () {
      it('should return value', function () {
        expect(port.error).toBe('error');
      });
    });
    describe('sender', function () {
      it('should return value', function () {
        expect(port.sender).toBeDefined();
        expect(port.sender.id).toBe('id');
      });
      it('should return null if "sender" is undefined', function () {
        var port = new _port.Port({
          sender: null
        }, {
          title: 'Firefox',
          name: 'firefox',
          version: '54.0',
          promises: true
        });
        expect(port.sender).toBeNull();
      });
    }); // endregion
    // region Events

    describe('onDisconnect', function () {
      it('supports addListener(listener)', function (done) {
        function listener(port) {
          expect(port).toBe('port');
          done();
        } // Add listener


        port.onDisconnect.addListener(listener); // Emit event

        onDisconnect.emit('port');
      });
    });
    describe('onMessage', function () {
      it('supports addListener(listener)', function (done) {
        function listener(message) {
          expect(message).toBe('message');
          done();
        } // Add listener


        port.onMessage.addListener(listener); // Emit event

        onMessage.emit('message');
      });
    }); // endregion
    // region Methods

    describe('disconnect', function () {
      it('should call function', function () {
        port.disconnect();
      });
    });
    describe('postMessage', function () {
      it('should call function', function () {
        port.postMessage('message');
      });
    }); // endregion
  });
});