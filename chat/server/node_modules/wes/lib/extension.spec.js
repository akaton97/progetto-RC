"use strict";

var _extension = require("./extension");

var _mock = require("./test/mock");

describe('Extension', function () {
  describe('Chrome', function () {
    var onRequest = new _mock.MockListener();
    var onRequestExternal = new _mock.MockListener();
    var extension = new _extension.Extension({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          extension: {
            // region Properties
            inIncognitoContext: true,
            lastError: null,
            // endregion
            // region Events
            onRequest: onRequest,
            onRequestExternal: onRequestExternal,
            // endregion
            // region Methods
            getBackgroundPage: function getBackgroundPage() {
              return 'getBackgroundPage';
            },
            getExtensionTabs: function getExtensionTabs(windowId) {
              return windowId;
            },
            getURL: function getURL(path) {
              return path;
            },
            getViews: function getViews(fetchProperties) {
              return fetchProperties;
            },
            isAllowedFileSchemeAccess: function isAllowedFileSchemeAccess(callback) {
              return callback('isAllowedFileSchemeAccess');
            },
            isAllowedIncognitoAccess: function isAllowedIncognitoAccess(callback) {
              return callback('isAllowedIncognitoAccess');
            },
            sendRequest: function sendRequest() {
              return false;
            },
            setUpdateUrlData: function setUpdateUrlData() {
              return false;
            } // endregion

          }
        }
      }
    }); // region Properties

    describe('inIncognitoContext', function () {
      it('should return value', function () {
        expect(extension.inIncognitoContext).toBe(true);
      });
    });
    describe('lastError', function () {
      it('should return null', function () {
        expect(extension.lastError).toBeNull();
      });
    }); // endregion
    // region Events

    describe('onRequest', function () {
      it('supports addListener(listener)', function (done) {
        function listener(request, sender, sendResponse) {
          expect(request).toBe('request');
          expect(sender).toBe('sender');
          expect(sendResponse).toBe('sendResponse');
          done();
        } // Add listener


        extension.onRequest.addListener(listener); // Emit event

        onRequest.emit('request', 'sender', 'sendResponse');
      });
    });
    describe('onRequestExternal', function () {
      it('supports addListener(listener)', function (done) {
        function listener(request, sender, sendResponse) {
          expect(request).toBe('request');
          expect(sender).toBe('sender');
          expect(sendResponse).toBe('sendResponse');
          done();
        } // Add listener


        extension.onRequestExternal.addListener(listener); // Emit event

        onRequestExternal.emit('request', 'sender', 'sendResponse');
      });
    }); // endregion
    // region Methods

    describe('getBackgroundPage', function () {
      it('should return value', function () {
        expect(extension.getBackgroundPage()).toBe('getBackgroundPage');
      });
    });
    describe('getExtensionTabs', function () {
      it('should return value', function () {
        expect(extension.getExtensionTabs(5)).toBe(5);
      });
    });
    describe('getURL', function () {
      it('should return value', function () {
        expect(extension.getURL('path')).toBe('path');
      });
    });
    describe('getViews', function () {
      it('should return value', function () {
        expect(extension.getViews({
          type: _extension.ViewType.Notification
        })).toEqual({
          type: _extension.ViewType.Notification
        });
      });
    });
    describe('isAllowedFileSchemeAccess', function () {
      it('should return promise', function () {
        return extension.isAllowedFileSchemeAccess().then(function (result) {
          expect(result).toBe('isAllowedFileSchemeAccess');
        });
      });
    });
    describe('isAllowedIncognitoAccess', function () {
      it('should return promise', function () {
        return extension.isAllowedIncognitoAccess().then(function (result) {
          expect(result).toBe('isAllowedIncognitoAccess');
        });
      });
    });
    describe('sendRequest', function () {
      it('should call function', function () {
        extension.sendRequest('extensionId', 'request', function () {
          return false;
        });
      });
    });
    describe('setUpdateUrlData', function () {
      it('should call function', function () {
        extension.setUpdateUrlData('url');
      });
    }); // endregion
  });
  describe('Firefox', function () {
    var extension = new _extension.Extension({
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true,
        namespace: {
          extension: {
            // region Properties
            inIncognitoContext: true,
            lastError: null,
            // endregion
            // region Methods
            getBackgroundPage: function getBackgroundPage() {
              return 'getBackgroundPage';
            },
            getURL: function getURL(path) {
              return path;
            },
            getViews: function getViews(fetchProperties) {
              return fetchProperties;
            },
            isAllowedFileSchemeAccess: function isAllowedFileSchemeAccess() {
              return Promise.resolve('isAllowedFileSchemeAccess');
            },
            isAllowedIncognitoAccess: function isAllowedIncognitoAccess() {
              return Promise.resolve('isAllowedIncognitoAccess');
            } // endregion

          }
        }
      }
    }); // region Properties

    describe('inIncognitoContext', function () {
      it('should return value', function () {
        expect(extension.inIncognitoContext).toBe(true);
      });
    });
    describe('lastError', function () {
      it('should return null', function () {
        expect(extension.lastError).toBeNull();
      });
    }); // endregion
    // region Events

    describe('onRequest', function () {
      it('should throw an error from addListener(listener)', function () {
        expect(function () {
          return extension.onRequest.addListener(function () {
            return false;
          });
        }).toThrowError(Error, 'extension.onRequest is not available (not implemented)');
      });
    });
    describe('onRequestExternal', function () {
      it('should throw an error from addListener(listener)', function () {
        expect(function () {
          return extension.onRequestExternal.addListener(function () {
            return false;
          });
        }).toThrowError(Error, 'extension.onRequestExternal is not available (not implemented)');
      });
    }); // endregion
    // region Methods

    describe('getBackgroundPage', function () {
      it('should return promise', function () {
        expect(extension.getBackgroundPage()).toBe('getBackgroundPage');
      });
    });
    describe('getExtensionTabs', function () {
      it('should reject with unsupported error', function () {
        expect(function () {
          return extension.getExtensionTabs(5);
        }).toThrowError(Error, 'extension.getExtensionTabs is not available (not implemented)');
      });
    });
    describe('getURL', function () {
      it('should return value', function () {
        expect(extension.getURL('path')).toBe('path');
      });
    });
    describe('getViews', function () {
      it('should return value', function () {
        expect(extension.getViews({
          type: _extension.ViewType.Notification
        })).toEqual({
          type: _extension.ViewType.Notification
        });
      });
    });
    describe('isAllowedFileSchemeAccess', function () {
      it('should return promise', function () {
        return extension.isAllowedFileSchemeAccess().then(function (result) {
          expect(result).toBe('isAllowedFileSchemeAccess');
        });
      });
    });
    describe('isAllowedIncognitoAccess', function () {
      it('should return promise', function () {
        return extension.isAllowedIncognitoAccess().then(function (result) {
          expect(result).toBe('isAllowedIncognitoAccess');
        });
      });
    });
    describe('sendRequest', function () {
      it('should reject with unsupported error', function () {
        expect(function () {
          return extension.sendRequest('extensionId', 'request', function () {
            return false;
          });
        }).toThrowError(Error, 'extension.sendRequest is not available (not implemented)');
      });
    });
    describe('setUpdateUrlData', function () {
      it('should reject with unsupported error', function () {
        expect(function () {
          return extension.setUpdateUrlData('url');
        }).toThrowError(Error, 'extension.setUpdateUrlData is not available (not implemented)');
      });
    }); // endregion
  });
});