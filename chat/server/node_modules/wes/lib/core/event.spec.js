"use strict";

var _mock = require("../test/mock");

var _event = _interopRequireWildcard(require("./event"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe('Event', function () {
  describe('Basic', function () {
    var compatibility = {
      onAdded: {
        __compat: {
          support: {
            chrome: {
              version_added: true
            }
          }
        }
      },
      onFuture: {
        __compat: {
          support: {
            chrome: {
              version_added: '56'
            }
          }
        }
      }
    };
    describe('addListener', function () {
      it('should receive events', function (done) {
        var onAdded = new _mock.MockEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onAdded: onAdded
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        event.addListener(function (result) {
          expect(result).toBe('event');
          done();
        }); // Emit event

        onAdded.emit('event');
      });
      it('should handle namespace changes', function (done) {
        var onAdded = new _mock.MockEvent();
        var namespace = {
          mock: {}
        };
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: namespace
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add event to namespace

        namespace.mock.onAdded = onAdded; // Add listener

        event.addListener(function (result) {
          expect(result).toBe('event');
          done();
        }); // Emit event

        onAdded.emit('event');
      });
      it('should handle an undefined api', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {}
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        expect(function () {
          return event.addListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock is not available');
      });
      it('should handle an undefined event', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {}
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        expect(function () {
          return event.addListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock.onAdded is not available');
      });
      it('should handle an unsupported event', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {}
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onFuture'); // Add listener

        expect(function () {
          return event.addListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock.onFuture is not available (requires: chrome >= 56)');
      });
      it('should handle a missing event', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {}
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onMissing'); // Add listener

        expect(function () {
          return event.addListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock.onMissing is not available (unknown member)');
      });
    });
    describe('hasListener', function () {
      it('should return true', function () {
        var onAdded = new _mock.MockEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onAdded: onAdded
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        function listener() {}

        event.addListener(listener); // Check if listener has been added

        expect(event.hasListener(listener)).toBe(true);
      });
      it('should return false', function () {
        var onAdded = new _mock.MockEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onAdded: onAdded
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        function listener() {} // Check if listener has been added


        expect(event.hasListener(listener)).toBe(false);
      });
    });
    describe('hasListeners', function () {
      it('should return true', function () {
        var onAdded = new _mock.MockEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onAdded: onAdded
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        event.addListener(function () {
          return false;
        }); // Check if there is any listeners

        expect(event.hasListeners()).toBe(true);
      });
      it('should return true', function () {
        var onAdded = new _mock.MockEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onAdded: onAdded
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Check if there is any listeners

        expect(event.hasListeners()).toBe(false);
      });
    });
    describe('removeListener', function () {
      it('should remove listener', function (done) {
        var onAdded = new _mock.MockEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onAdded: onAdded
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add rejection listener

        function listener() {
          done.fail();
        }

        event.addListener(listener); // Add success listener

        event.addListener(function (result) {
          expect(result).toBe('event');
          done();
        }); // Remove listener

        event.removeListener(listener); // Emit event

        onAdded.emit('event');
      });
      it('should handle an undefined api', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {}
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        expect(function () {
          return event.removeListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock is not available');
      });
      it('should handle an undefined event', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {}
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onAdded'); // Add listener

        expect(function () {
          return event.removeListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock.onAdded is not available');
      });
      it('should handle an unsupported event', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {}
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onFuture'); // Add listener

        expect(function () {
          return event.removeListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock.onFuture is not available (requires: chrome >= 56)');
      });
      it('should handle a missing event', function () {
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {}
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.default(api, 'onMissing'); // Add listener

        expect(function () {
          return event.removeListener(function () {
            return false;
          });
        }).toThrowError(Error, 'mock.onMissing is not available (unknown member)');
      });
    });
  });
  describe('Declarative', function () {
    var compatibility = {
      onChanged: {
        __compat: {
          support: {
            chrome: {
              version_added: true
            }
          }
        },
        addRules: {
          __compat: {
            support: {
              chrome: {
                version_added: true
              }
            }
          }
        },
        getRules: {
          __compat: {
            support: {
              chrome: {
                version_added: true
              }
            }
          }
        },
        removeRules: {
          __compat: {
            support: {
              chrome: {
                version_added: true
              }
            }
          }
        }
      }
    };
    describe('addRules', function () {
      it('should add rule', function () {
        var onChanged = new _mock.MockDeclarativeEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onChanged: onChanged
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.DeclarativeEvent(api, 'onChanged'); // Add rule

        return event.addRules([{
          id: 'rule'
        }]).then(function (added) {
          expect(added.length).toBe(1);
          expect(added[0].id).toBe('rule');
        });
      });
    });
    describe('getRules', function () {
      it('should return rules', function () {
        var onChanged = new _mock.MockDeclarativeEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onChanged: onChanged
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.DeclarativeEvent(api, 'onChanged'); // Add rule

        return event.addRules([{
          id: 'rule'
        }]).then(function () {
          return (// Retrieve current rules
            event.getRules().then(function (rules) {
              expect(rules.length).toBe(1);
              expect(rules[0].id).toBe('rule');
            })
          );
        });
      });
    });
    describe('removeRules', function () {
      it('should remove rules', function () {
        var onChanged = new _mock.MockDeclarativeEvent();
        var api = new _mock.MockAPI({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              mock: {
                onChanged: onChanged
              }
            }
          },
          compatibility: {
            webextensions: {
              api: {
                mock: compatibility
              }
            }
          }
        }); // Create event wrapper

        var event = new _event.DeclarativeEvent(api, 'onChanged'); // Add rule

        return event.addRules([{
          id: 'rule'
        }]) // Ensure the rule has been added
        .then(function () {
          return event.getRules(['rule']).then(function (rules) {
            expect(rules.length).toBe(1);
          });
        }) // Remove rule
        .then(function () {
          return event.removeRules(['rule']);
        }) // Ensure the rule has been removed
        .then(function () {
          return event.getRules(['rule']).then(function (rules) {
            expect(rules.length).toBe(0);
          });
        });
      });
    });
  });
});