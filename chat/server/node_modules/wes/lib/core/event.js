"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeclarativeEvent = exports.default = void 0;

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _base = _interopRequireDefault(require("./base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Event which allows the addition and removal of listeners.
 *
 * @see {@link https://developer.chrome.com/extensions/events#type-Event}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/events/Event}
 */
var Event =
/*#__PURE__*/
function (_Base) {
  _inherits(Event, _Base);

  function Event(api, name) {
    var _this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Event);

    _this = _possibleConstructorReturn(this, (Event.__proto__ || Object.getPrototypeOf(Event)).call(this, _extends({
      browser: api.$browser,
      compatibility: api.$compatibility
    }, options || {})));
    _this._api = api;
    _this._key = name; // Create title

    _this.$title = "".concat(api.$title, ".").concat(name); // Create name

    _this.$name = "".concat(api.$name, ".").concat(name);
    return _this;
  }

  _createClass(Event, [{
    key: "addListener",

    /**
     * Register an event listener `callback` to this event.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-addListener}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/addListener}
     *
     * @param {Function} callback Event listener
     * @param {Array} args Arguments
     */
    value: function addListener(callback) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      this.$call.apply(this, ['addListener', callback].concat(args));
    }
    /**
     * Check whether an event listener `callback` is registered to this event.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-hasListener}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/hasListener}
     *
     * @param {Function} callback Event listener
     */

  }, {
    key: "hasListener",
    value: function hasListener(callback) {
      return this.$call('hasListener', callback);
    }
    /**
     * Check whether any event listeners are registered to this event.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-hasListeners}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/hasListeners}
     *
     * @returns {Boolean}
     */

  }, {
    key: "hasListeners",
    value: function hasListeners() {
      return this.$call('hasListeners');
    }
    /**
     * Deregister an event listener `callback` from this event.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-removeListener}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/removeListener}
     *
     * @param {Function} callback Event listener
     */

  }, {
    key: "removeListener",
    value: function removeListener(callback) {
      this.$call('removeListener', callback);
    }
  }, {
    key: "$target",
    get: function get() {
      if ((0, _isNil.default)(this._api.$target)) {
        return null;
      }

      return this._api.$target[this._key] || null;
    }
  }]);

  return Event;
}(_base.default);
/**
 * Declarative rule for handling events.
 *
 * @see {@link https://developer.chrome.com/extensions/events#type-Rule}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/events/Rule}
 *
 * @typedef {Object} DeclarativeEvent~Rule
 *
 * @property {any[]} actions     - Actions that are triggered if one of the conditions is fulfilled.
 * @property {any[]} conditions  - Conditions that can trigger the actions.
 * @property {String} [id]       - Identifier that allows referencing this rule.
 * @property {Number} [priority] - Priority of this rule. Defaults to 100.
 * @property {String[]} [tags]   - Tags can be used to annotate rules and perform operations on sets of rules.
 */

/**
 * Declarative event which allows the addition and removal of rules.
 *
 * @see {@link https://developer.chrome.com/extensions/events#type-Event}
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/events/Event}
 */


exports.default = Event;
Object.defineProperty(Event, "Standard", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: ['addListener', 'hasListener', 'hasListeners', 'removeListener']
});

var DeclarativeEvent =
/*#__PURE__*/
function (_Event) {
  _inherits(DeclarativeEvent, _Event);

  function DeclarativeEvent() {
    _classCallCheck(this, DeclarativeEvent);

    return _possibleConstructorReturn(this, (DeclarativeEvent.__proto__ || Object.getPrototypeOf(DeclarativeEvent)).apply(this, arguments));
  }

  _createClass(DeclarativeEvent, [{
    key: "addRules",

    /**
     * Registers `rules` to handle this event. These do not replace previously registered rules.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-addRules}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/addRules}
     *
     * @param {...DeclarativeEvent~Rule[]} rules Rules to be registered.
     *
     * @returns {Promise} A {@link Promise} that will be fulfilled with the rules that were registered, including any
     *                    optional parameters.
     */
    value: function addRules(rules) {
      return this.$promise('addRules', rules);
    }
    /**
     * Retrieve currently registered rules.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-getRules}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/getRules}
     *
     * @param {String[]} [ruleIdentifiers] Only return rules matching these identifiers.
     *
     * @returns {Promise} A {@link Promise} that will be fulfilled with the currently registered rules, including any
     *                    optional parameters.
     */

  }, {
    key: "getRules",
    value: function getRules(ruleIdentifiers) {
      return this.$promise('getRules', ruleIdentifiers);
    }
    /**
     * Unregister currently registered rules.
     *
     * @see {@link https://developer.chrome.com/extensions/events#method-Event-removeRules}
     * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/removeRules}
     *
     * @param {String[]} [ruleIdentifiers] Only remove rules matching these identifiers.
     *
     * @returns {Promise} A {@link Promise} that will be fulfilled if the rules were unregistered.
     */

  }, {
    key: "removeRules",
    value: function removeRules(ruleIdentifiers) {
      return this.$promise('removeRules', ruleIdentifiers);
    }
  }]);

  return DeclarativeEvent;
}(Event);

exports.DeclarativeEvent = DeclarativeEvent;
Object.defineProperty(DeclarativeEvent, "Standard", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: Event.Standard.concat(['addRules', 'getRules', 'removeRules'])
});