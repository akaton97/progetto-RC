"use strict";

var _mock = require("./test/mock");

var _declarativeContent = require("./declarativeContent");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MockPageStateMatcher =
/*#__PURE__*/
function (_MockDeclarativeCondi) {
  _inherits(MockPageStateMatcher, _MockDeclarativeCondi);

  function MockPageStateMatcher(options) {
    var _this;

    _classCallCheck(this, MockPageStateMatcher);

    _this = _possibleConstructorReturn(this, (MockPageStateMatcher.__proto__ || Object.getPrototypeOf(MockPageStateMatcher)).call(this));
    _this.options = options;
    return _this;
  }

  return MockPageStateMatcher;
}(_mock.MockDeclarativeCondition);

var MockRequestContentScript =
/*#__PURE__*/
function (_MockDeclarativeActio) {
  _inherits(MockRequestContentScript, _MockDeclarativeActio);

  function MockRequestContentScript(options) {
    var _this2;

    _classCallCheck(this, MockRequestContentScript);

    _this2 = _possibleConstructorReturn(this, (MockRequestContentScript.__proto__ || Object.getPrototypeOf(MockRequestContentScript)).call(this));
    _this2.options = options;
    return _this2;
  }

  return MockRequestContentScript;
}(_mock.MockDeclarativeAction);

var MockSetIcon =
/*#__PURE__*/
function (_MockDeclarativeActio2) {
  _inherits(MockSetIcon, _MockDeclarativeActio2);

  function MockSetIcon(options) {
    var _this3;

    _classCallCheck(this, MockSetIcon);

    _this3 = _possibleConstructorReturn(this, (MockSetIcon.__proto__ || Object.getPrototypeOf(MockSetIcon)).call(this));
    _this3.options = options;
    return _this3;
  }

  return MockSetIcon;
}(_mock.MockDeclarativeAction);

var MockShowPageAction =
/*#__PURE__*/
function (_MockDeclarativeActio3) {
  _inherits(MockShowPageAction, _MockDeclarativeActio3);

  function MockShowPageAction() {
    _classCallCheck(this, MockShowPageAction);

    return _possibleConstructorReturn(this, (MockShowPageAction.__proto__ || Object.getPrototypeOf(MockShowPageAction)).apply(this, arguments));
  }

  return MockShowPageAction;
}(_mock.MockDeclarativeAction);

describe('PageStateMatcher', function () {
  describe('Chrome', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          declarativeContent: {
            PageStateMatcher: MockPageStateMatcher
          }
        }
      }
    });
    var matcher = new _declarativeContent.PageStateMatcher({
      pageUrl: {
        hostEquals: 'www.google.com',
        schemes: ['https']
      },
      css: ['input[type="password"]']
    });
    describe('$create', function () {
      it('should return value', function () {
        expect(matcher.$create(declarativeContent).options).toEqual({
          pageUrl: {
            hostEquals: 'www.google.com',
            schemes: ['https']
          },
          css: ['input[type="password"]']
        });
      });
    });
  });
  describe('Firefox', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {}
      }
    });
    var matcher = new _declarativeContent.PageStateMatcher({
      pageUrl: {
        hostEquals: 'www.google.com',
        schemes: ['https']
      },
      css: ['input[type="password"]']
    });
    describe('$create', function () {
      it('should throw an error', function () {
        expect(function () {
          return matcher.$create(declarativeContent);
        }).toThrowError(Error, 'declarativeContent is not available');
      });
    });
  });
});
describe('RequestContentScript', function () {
  describe('Chrome', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          declarativeContent: {
            RequestContentScript: MockRequestContentScript
          }
        }
      }
    });
    var action = new _declarativeContent.RequestContentScript({
      css: ['test.css']
    });
    describe('$create', function () {
      it('should return value', function () {
        expect(action.$create(declarativeContent).options).toEqual({
          css: ['test.css']
        });
      });
    });
  });
  describe('Firefox', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {}
      }
    });
    var action = new _declarativeContent.RequestContentScript({
      css: ['test.css']
    });
    describe('$create', function () {
      it('should throw an error', function () {
        expect(function () {
          return action.$create(declarativeContent);
        }).toThrowError(Error, 'declarativeContent is not available');
      });
    });
  });
});
describe('SetIcon', function () {
  describe('Chrome', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          declarativeContent: {
            SetIcon: MockSetIcon
          }
        }
      }
    });
    var action = new _declarativeContent.SetIcon({
      imageData: 'imageData'
    });
    describe('$create', function () {
      it('should return value', function () {
        expect(action.$create(declarativeContent).options).toEqual({
          imageData: 'imageData'
        });
      });
    });
  });
  describe('Firefox', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {}
      }
    });
    var matcher = new _declarativeContent.SetIcon({
      imageData: 'imageData'
    });
    describe('$create', function () {
      it('should throw an error', function () {
        expect(function () {
          return matcher.$create(declarativeContent);
        }).toThrowError(Error, 'declarativeContent is not available');
      });
    });
  });
});
describe('ShowPageAction', function () {
  describe('Chrome', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          declarativeContent: {
            ShowPageAction: MockShowPageAction
          }
        }
      }
    });
    var action = new _declarativeContent.ShowPageAction();
    describe('$create', function () {
      it('should return instance', function () {
        var instance = action.$create(declarativeContent);
        expect(instance instanceof MockShowPageAction).toBeTruthy();
      });
    });
  });
  describe('Firefox', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {}
      }
    });
    var action = new _declarativeContent.ShowPageAction();
    describe('$create', function () {
      it('should throw an error', function () {
        expect(function () {
          return action.$create(declarativeContent);
        }).toThrowError(Error, 'declarativeContent is not available');
      });
    });
  });
});
describe('DeclarativeContent', function () {
  describe('Chrome', function () {
    var onPageChanged = new _mock.MockDeclarativeEvent();
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          declarativeContent: {
            RequestContentScript: MockRequestContentScript,
            SetIcon: MockSetIcon,
            ShowPageAction: MockShowPageAction,
            PageStateMatcher: MockPageStateMatcher,
            onPageChanged: onPageChanged
          }
        }
      }
    });
    describe('onPageChanged', function () {
      describe('addRules', function () {
        it('should add rule to event', function () {
          return declarativeContent.onPageChanged.addRules([{
            actions: [new _declarativeContent.RequestContentScript({
              css: ['test.css']
            }), new _declarativeContent.SetIcon({
              imageData: 'imageData'
            }), new _declarativeContent.ShowPageAction()],
            conditions: [new _declarativeContent.PageStateMatcher({
              pageUrl: {
                hostEquals: 'www.google.com',
                schemes: ['https']
              },
              css: ['input[type="password"]']
            })]
          }]).then(function (added) {
            expect(added.length).toBe(1); // Actions

            expect(added[0].actions.length).toBe(3); // RequestContentScript

            expect(added[0].actions[0] instanceof MockRequestContentScript).toBeTruthy();
            expect(added[0].actions[0].options).toEqual({
              css: ['test.css']
            }); // SetIcon

            expect(added[0].actions[1] instanceof MockSetIcon).toBeTruthy();
            expect(added[0].actions[1].options).toEqual({
              imageData: 'imageData'
            }); // ShowPageAction

            expect(added[0].actions[2] instanceof MockShowPageAction).toBeTruthy(); // Conditions

            expect(added[0].conditions.length).toBe(1); // PageStateMatcher

            expect(added[0].conditions[0] instanceof MockPageStateMatcher).toBeTruthy();
            expect(added[0].conditions[0].options).toEqual({
              pageUrl: {
                hostEquals: 'www.google.com',
                schemes: ['https']
              },
              css: ['input[type="password"]']
            });
          });
        });
        it('should throw an error on empty actions', function (done) {
          declarativeContent.onPageChanged.addRules([{
            actions: [],
            conditions: [new _declarativeContent.PageStateMatcher({
              pageUrl: {
                hostEquals: 'www.google.com',
                schemes: ['https']
              },
              css: ['input[type="password"]']
            })]
          }]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('At least one action is required');
            done();
          });
        });
        it('should throw an error on empty conditions', function (done) {
          declarativeContent.onPageChanged.addRules([{
            actions: [new _declarativeContent.ShowPageAction()],
            conditions: []
          }]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('At least one condition is required');
            done();
          });
        });
        it('should throw an error on nil rule', function (done) {
          declarativeContent.onPageChanged.addRules([null]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('Invalid rule: null');
            done();
          });
        });
        it('should throw an error on invalid rule', function (done) {
          declarativeContent.onPageChanged.addRules([false]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('Invalid rule: false');
            done();
          });
        });
        it('should throw an error on invalid actions', function (done) {
          declarativeContent.onPageChanged.addRules([{
            actions: false,
            conditions: [new _declarativeContent.PageStateMatcher({
              pageUrl: {
                hostEquals: 'www.google.com',
                schemes: ['https']
              },
              css: ['input[type="password"]']
            })]
          }]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('Invalid actions: false');
            done();
          });
        });
        it('should throw an error on invalid conditions', function (done) {
          declarativeContent.onPageChanged.addRules([{
            actions: [new _declarativeContent.ShowPageAction()],
            conditions: false
          }]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('Invalid conditions: false');
            done();
          });
        });
        it('should throw an error on invalid action', function (done) {
          declarativeContent.onPageChanged.addRules([{
            actions: ['error'],
            conditions: [new _declarativeContent.PageStateMatcher({
              pageUrl: {
                hostEquals: 'www.google.com',
                schemes: ['https']
              },
              css: ['input[type="password"]']
            })]
          }]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('Invalid action: error');
            done();
          });
        });
        it('should throw an error on invalid condition', function (done) {
          declarativeContent.onPageChanged.addRules([{
            actions: [new _declarativeContent.ShowPageAction()],
            conditions: ['error']
          }]).then(function () {
            done.fail('Promise wasn\'t rejected');
          }, function (err) {
            expect(err.message).toBe('Invalid condition: error');
            done();
          });
        });
      });
    });
  });
  describe('Firefox', function () {
    var declarativeContent = new _declarativeContent.DeclarativeContent({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {}
      }
    });
    var action = new _declarativeContent.RequestContentScript({
      css: ['test.css']
    });
    describe('$create', function () {
      it('should throw an error', function () {
        expect(function () {
          return action.$create(declarativeContent);
        }).toThrowError(Error, 'declarativeContent is not available');
      });
    });
  });
});