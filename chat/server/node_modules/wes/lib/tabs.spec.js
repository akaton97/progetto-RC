"use strict";

var _port = require("./objects/port");

var _tabs = require("./tabs");

describe('Tab', function () {
  describe('Chrome', function () {
    var tab = new _tabs.Tab({
      active: true,
      audible: false,
      autoDiscardable: false,
      discarded: false,
      favIconUrl: 'favIconUrl',
      height: 100,
      hidden: false,
      highlighted: false,
      id: 'id',
      incognito: false,
      index: 1,
      openerTabId: null,
      pinned: true,
      selected: false,
      sessionId: 'sessionId',
      status: 'status',
      title: 'title',
      url: 'url',
      width: 400,
      windowId: 1,
      mutedInfo: {
        extensionId: null,
        muted: true,
        reason: 'user'
      }
    }, {
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false
      }
    }); // region Properties

    describe('active', function () {
      it('should return value', function () {
        expect(tab.active).toBeTruthy();
      });
    });
    describe('audible', function () {
      it('should return value', function () {
        expect(tab.audible).toBeFalsy();
      });
    });
    describe('autoDiscardable', function () {
      it('should return value', function () {
        expect(tab.autoDiscardable).toBeFalsy();
      });
    });
    describe('cookieStoreId', function () {
      it('should throw an error', function () {
        expect(function () {
          return tab.cookieStoreId;
        }).toThrowError(Error, 'cookieStoreId is not available (not implemented)');
      });
    });
    describe('discarded', function () {
      it('should return value', function () {
        expect(tab.discarded).toBeFalsy();
      });
    });
    describe('favIconUrl', function () {
      it('should return value', function () {
        expect(tab.favIconUrl).toBe('favIconUrl');
      });
    });
    describe('height', function () {
      it('should return value', function () {
        expect(tab.height).toBe(100);
      });
    });
    describe('hidden', function () {
      it('should return value', function () {
        expect(tab.hidden).toBeFalsy();
      });
    });
    describe('highlighted', function () {
      it('should return value', function () {
        expect(tab.highlighted).toBeFalsy();
      });
    });
    describe('id', function () {
      it('should return value', function () {
        expect(tab.id).toBe('id');
      });
    });
    describe('incognito', function () {
      it('should return value', function () {
        expect(tab.incognito).toBeFalsy();
      });
    });
    describe('index', function () {
      it('should return value', function () {
        expect(tab.index).toBe(1);
      });
    });
    describe('isArticle', function () {
      it('should throw an error', function () {
        expect(function () {
          return tab.isArticle;
        }).toThrowError(Error, 'isArticle is not available (not implemented)');
      });
    });
    describe('isInReaderMode', function () {
      it('should throw an error', function () {
        expect(function () {
          return tab.isInReaderMode;
        }).toThrowError(Error, 'isInReaderMode is not available (not implemented)');
      });
    });
    describe('lastAccessed', function () {
      it('should throw an error', function () {
        expect(function () {
          return tab.lastAccessed;
        }).toThrowError(Error, 'lastAccessed is not available (not implemented)');
      });
    });
    describe('mutedInfo', function () {
      it('should return value', function () {
        expect(tab.mutedInfo).toEqual({
          extensionId: null,
          muted: true,
          reason: 'user'
        });
      });
    });
    describe('openerTabId', function () {
      it('should return value', function () {
        expect(tab.openerTabId).toBeNull();
      });
    });
    describe('pinned', function () {
      it('should return value', function () {
        expect(tab.pinned).toBeTruthy();
      });
    });
    describe('selected', function () {
      it('should return value', function () {
        expect(tab.selected).toBeFalsy();
      });
    });
    describe('sessionId', function () {
      it('should return value', function () {
        expect(tab.sessionId).toBe('sessionId');
      });
    });
    describe('status', function () {
      it('should return value', function () {
        expect(tab.status).toBe('status');
      });
    });
    describe('title', function () {
      it('should return value', function () {
        expect(tab.title).toBe('title');
      });
    });
    describe('url', function () {
      it('should return value', function () {
        expect(tab.url).toBe('url');
      });
    });
    describe('width', function () {
      it('should return value', function () {
        expect(tab.width).toBe(400);
      });
    });
    describe('windowId', function () {
      it('should return value', function () {
        expect(tab.windowId).toBe(1);
      });
    }); // endregion
  });
  describe('Firefox', function () {
    var tab = new _tabs.Tab({
      active: true,
      audible: false,
      cookieStoreId: 'cookieStoreId',
      discarded: false,
      favIconUrl: 'favIconUrl',
      height: 100,
      hidden: false,
      highlighted: false,
      id: 'id',
      incognito: false,
      index: 1,
      isArticle: true,
      isInReaderMode: false,
      lastAccessed: 123,
      openerTabId: null,
      pinned: true,
      selected: false,
      status: 'status',
      title: 'title',
      url: 'url',
      width: 400,
      windowId: 1,
      mutedInfo: {
        extensionId: null,
        muted: true,
        reason: 'user'
      }
    }, {
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    }); // region Properties

    describe('active', function () {
      it('should return value', function () {
        expect(tab.active).toBeTruthy();
      });
    });
    describe('audible', function () {
      it('should return value', function () {
        expect(tab.audible).toBeFalsy();
      });
    });
    describe('autoDiscardable', function () {
      it('should throw an error', function () {
        expect(function () {
          return tab.autoDiscardable;
        }).toThrowError(Error, 'autoDiscardable is not available (not implemented)');
      });
    });
    describe('cookieStoreId', function () {
      it('should return value', function () {
        expect(tab.cookieStoreId).toBe('cookieStoreId');
      });
    });
    describe('discarded', function () {
      it('should return value', function () {
        expect(tab.discarded).toBeFalsy();
      });
    });
    describe('favIconUrl', function () {
      it('should return value', function () {
        expect(tab.favIconUrl).toBe('favIconUrl');
      });
    });
    describe('height', function () {
      it('should return value', function () {
        expect(tab.height).toBe(100);
      });
    });
    describe('hidden', function () {
      it('should return value', function () {
        expect(tab.hidden).toBeFalsy();
      });
    });
    describe('highlighted', function () {
      it('should return value', function () {
        expect(tab.highlighted).toBeFalsy();
      });
    });
    describe('id', function () {
      it('should return value', function () {
        expect(tab.id).toBe('id');
      });
    });
    describe('incognito', function () {
      it('should return value', function () {
        expect(tab.incognito).toBeFalsy();
      });
    });
    describe('index', function () {
      it('should return value', function () {
        expect(tab.index).toBe(1);
      });
    });
    describe('isArticle', function () {
      it('should return value', function () {
        expect(tab.isArticle).toBeTruthy();
      });
    });
    describe('isInReaderMode', function () {
      it('should return value', function () {
        expect(tab.isInReaderMode).toBeFalsy();
      });
    });
    describe('isInReaderMode', function () {
      it('should return value', function () {
        expect(tab.lastAccessed).toBe(123);
      });
    });
    describe('mutedInfo', function () {
      it('should return value', function () {
        expect(tab.mutedInfo).toEqual({
          extensionId: null,
          muted: true,
          reason: 'user'
        });
      });
    });
    describe('openerTabId', function () {
      it('should return value', function () {
        expect(tab.openerTabId).toBeNull();
      });
    });
    describe('pinned', function () {
      it('should return value', function () {
        expect(tab.pinned).toBeTruthy();
      });
    });
    describe('selected', function () {
      it('should return value', function () {
        expect(tab.selected).toBeFalsy();
      });
    });
    describe('sessionId', function () {
      it('should throw an error', function () {
        expect(function () {
          return tab.sessionId;
        }).toThrowError(Error, 'sessionId is not available (not implemented)');
      });
    });
    describe('status', function () {
      it('should return value', function () {
        expect(tab.status).toBe('status');
      });
    });
    describe('title', function () {
      it('should return value', function () {
        expect(tab.title).toBe('title');
      });
    });
    describe('url', function () {
      it('should return value', function () {
        expect(tab.url).toBe('url');
      });
    });
    describe('width', function () {
      it('should return value', function () {
        expect(tab.width).toBe(400);
      });
    });
    describe('windowId', function () {
      it('should return value', function () {
        expect(tab.windowId).toBe(1);
      });
    }); // endregion
  });
});
describe('Tabs', function () {
  describe('Chrome', function () {
    var tabs = new _tabs.Tabs({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false,
        namespace: {
          tabs: {
            // region Methods
            captureVisibleTab: function captureVisibleTab(windowId, options, callback) {
              return callback({
                windowId: windowId,
                options: options
              });
            },
            connect: function connect(tabId, connectInfo) {
              return {
                name: connectInfo.name,
                sender: {
                  frameId: connectInfo.frameId,
                  id: tabId
                }
              };
            },
            create: function create(createProperties, callback) {
              return callback({
                createProperties: createProperties
              });
            },
            detectLanguage: function detectLanguage(tabId, callback) {
              return callback({
                tabId: tabId
              });
            },
            discard: function discard(tabIds, callback) {
              return callback({
                tabIds: tabIds
              });
            },
            duplicate: function duplicate(tabId, callback) {
              return callback({
                tabId: tabId
              });
            },
            executeScript: function executeScript(tabId, details, callback) {
              return callback({
                tabId: tabId,
                details: details
              });
            },
            get: function get(tabId, callback) {
              return callback({
                tabId: tabId
              });
            },
            getAllInWindow: function getAllInWindow(windowId, callback) {
              return callback({
                windowId: windowId
              });
            },
            getCurrent: function getCurrent(callback) {
              return callback(true);
            },
            getSelected: function getSelected(windowId, callback) {
              return callback({
                windowId: windowId
              });
            },
            getZoom: function getZoom(tabId, callback) {
              return callback({
                tabId: tabId
              });
            },
            getZoomSettings: function getZoomSettings(tabId, callback) {
              return callback({
                tabId: tabId
              });
            },
            highlight: function highlight(highlightInfo, callback) {
              return callback({
                highlightInfo: highlightInfo
              });
            },
            insertCSS: function insertCSS(tabId, details, callback) {
              return callback({
                tabId: tabId,
                details: details
              });
            },
            move: function move(tabIds, moveProperties, callback) {
              return callback({
                tabIds: tabIds,
                moveProperties: moveProperties
              });
            },
            query: function query(queryInfo, callback) {
              return callback({
                queryInfo: queryInfo
              });
            },
            reload: function reload(tabId, reloadProperties, callback) {
              return callback({
                tabId: tabId,
                reloadProperties: reloadProperties
              });
            },
            remove: function remove(tabIds, callback) {
              return callback({
                tabIds: tabIds
              });
            },
            sendMessage: function sendMessage(tabId, message, options, callback) {
              return callback({
                tabId: tabId,
                message: message,
                options: options
              });
            },
            sendRequest: function sendRequest(tabId, request, callback) {
              return callback({
                tabId: tabId,
                request: request
              });
            },
            setZoom: function setZoom(tabId, zoomFactor, callback) {
              return callback({
                tabId: tabId,
                zoomFactor: zoomFactor
              });
            },
            setZoomSettings: function setZoomSettings(tabId, zoomSettings, callback) {
              return callback({
                tabId: tabId,
                zoomSettings: zoomSettings
              });
            },
            update: function update(tabId, updateProperties, callback) {
              return callback({
                tabId: tabId,
                updateProperties: updateProperties
              });
            } // endregion

          }
        }
      }
    }); // region Events
    // endregion
    // region Methods

    describe('captureTab', function () {
      it('should reject with unsupported error', function (done) {
        tabs.captureTab().then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.captureTab is not available (not implemented)');
          done();
        });
      });
    });
    describe('captureVisibleTab', function () {
      it('should return promise', function () {
        return tabs.captureVisibleTab(1, {
          format: _tabs.ImageFormat.JPEG,
          quality: 100
        }).then(function (result) {
          expect(result).toEqual({
            windowId: 1,
            options: {
              format: _tabs.ImageFormat.JPEG,
              quality: 100
            }
          });
        });
      });
    });
    describe('connect', function () {
      it('should return instance', function () {
        var port = tabs.connect(1, {
          name: 'test',
          frameId: 2
        });
        expect(port instanceof _port.Port).toBeTruthy();
        expect(port.name).toBe('test');
        expect(port.sender instanceof _port.MessageSender).toBeTruthy();
        expect(port.sender.frameId).toBe(2);
        expect(port.sender.id).toBe(1);
      });
      it('should return null if no port is returned', function () {
        var tabs = new _tabs.Tabs({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              tabs: {
                connect: function connect() {
                  return null;
                }
              }
            }
          }
        });
        expect(tabs.connect(1, {
          name: 'test'
        })).toBeNull();
      });
    });
    describe('create', function () {
      it('should return promise', function () {
        return tabs.create('createProperties').then(function (result) {
          expect(result).toEqual({
            createProperties: 'createProperties'
          });
        });
      });
    });
    describe('detectLanguage', function () {
      it('should return promise', function () {
        return tabs.detectLanguage(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('discard', function () {
      it('should return promise', function () {
        return tabs.discard(1).then(function (result) {
          expect(result).toEqual({
            tabIds: 1
          });
        });
      });
    });
    describe('duplicate', function () {
      it('should return promise', function () {
        return tabs.duplicate(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('executeScript', function () {
      it('should return promise', function () {
        return tabs.executeScript(1, {
          allFrames: true
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            details: {
              allFrames: true
            }
          });
        });
      });
    });
    describe('get', function () {
      it('should return promise', function () {
        return tabs.get(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('getAllInWindow', function () {
      it('should return promise', function () {
        return tabs.getAllInWindow(1).then(function (result) {
          expect(result).toEqual({
            windowId: 1
          });
        });
      });
    });
    describe('getCurrent', function () {
      it('should return promise', function () {
        return tabs.getCurrent().then(function (result) {
          expect(result).toBe(true);
        });
      });
    });
    describe('getSelected', function () {
      it('should return promise', function () {
        return tabs.getSelected(1).then(function (result) {
          expect(result).toEqual({
            windowId: 1
          });
        });
      });
    });
    describe('getZoom', function () {
      it('should return promise', function () {
        return tabs.getZoom(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('getZoomSettings', function () {
      it('should return promise', function () {
        return tabs.getZoomSettings(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('hide', function () {
      it('should reject with unsupported error', function (done) {
        tabs.hide(1).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.hide is not available (not implemented)');
          done();
        });
      });
    });
    describe('highlight', function () {
      it('should return promise', function () {
        return tabs.highlight({
          tabs: 1
        }).then(function (result) {
          expect(result).toEqual({
            highlightInfo: {
              tabs: 1
            }
          });
        });
      });
    });
    describe('insertCSS', function () {
      it('should return promise', function () {
        return tabs.insertCSS(1, {
          code: 'code'
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            details: {
              code: 'code'
            }
          });
        });
      });
    });
    describe('move', function () {
      it('should return promise', function () {
        return tabs.move(1, {
          index: 2
        }).then(function (result) {
          expect(result).toEqual({
            tabIds: 1,
            moveProperties: {
              index: 2
            }
          });
        });
      });
    });
    describe('print', function () {
      it('should reject with unsupported error', function () {
        expect(function () {
          return tabs.print();
        }).toThrowError(Error, 'tabs.print is not available (not implemented)');
      });
    });
    describe('printPreview', function () {
      it('should reject with unsupported error', function (done) {
        tabs.printPreview().then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.printPreview is not available (not implemented)');
          done();
        });
      });
    });
    describe('query', function () {
      it('should return promise', function () {
        return tabs.query({
          active: true
        }).then(function (result) {
          expect(result).toEqual({
            queryInfo: {
              active: true
            }
          });
        });
      });
    });
    describe('reload', function () {
      it('should return promise', function () {
        return tabs.reload(1, {
          bypassCache: false
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            reloadProperties: {
              bypassCache: false
            }
          });
        });
      });
    });
    describe('remove', function () {
      it('should return promise', function () {
        return tabs.remove(1).then(function (result) {
          expect(result).toEqual({
            tabIds: 1
          });
        });
      });
    });
    describe('removeCSS', function () {
      it('should reject with unsupported error', function (done) {
        tabs.removeCSS(1, {
          code: 'code'
        }).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.removeCSS is not available (not implemented)');
          done();
        });
      });
    });
    describe('saveAsPDF', function () {
      it('should reject with unsupported error', function (done) {
        tabs.saveAsPDF({
          scaling: 1
        }).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.saveAsPDF is not available (not implemented)');
          done();
        });
      });
    });
    describe('sendMessage', function () {
      it('should return promise', function () {
        return tabs.sendMessage(1, 'message', {
          frameId: 1
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            message: 'message',
            options: {
              frameId: 1
            }
          });
        });
      });
    });
    describe('sendRequest', function () {
      it('should return promise', function () {
        return tabs.sendRequest(1, 'request').then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            request: 'request'
          });
        });
      });
    });
    describe('setZoom', function () {
      it('should return promise', function () {
        return tabs.setZoom(1, 1).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            zoomFactor: 1
          });
        });
      });
    });
    describe('setZoomSettings', function () {
      it('should return promise', function () {
        return tabs.setZoomSettings(1, {
          defaultZoomFactor: 1
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            zoomSettings: {
              defaultZoomFactor: 1
            }
          });
        });
      });
    });
    describe('show', function () {
      it('should reject with unsupported error', function (done) {
        tabs.show(1).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.show is not available (not implemented)');
          done();
        });
      });
    });
    describe('toggleReaderMode', function () {
      it('should reject with unsupported error', function (done) {
        tabs.toggleReaderMode(1).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.toggleReaderMode is not available (not implemented)');
          done();
        });
      });
    });
    describe('update', function () {
      it('should return promise', function () {
        return tabs.update(1, {
          active: true
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            updateProperties: {
              active: true
            }
          });
        });
      });
    }); // endregion
  });
  describe('Firefox', function () {
    var tabs = new _tabs.Tabs({
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true,
        namespace: {
          tabs: {
            // region Methods
            captureTab: function captureTab(tabId, options) {
              return Promise.resolve({
                tabId: tabId,
                options: options
              });
            },
            captureVisibleTab: function captureVisibleTab(windowId, options) {
              return Promise.resolve({
                windowId: windowId,
                options: options
              });
            },
            connect: function connect(tabId, connectInfo) {
              return {
                name: connectInfo.name,
                sender: {
                  frameId: connectInfo.frameId,
                  id: tabId
                }
              };
            },
            create: function create(createProperties) {
              return Promise.resolve({
                createProperties: createProperties
              });
            },
            detectLanguage: function detectLanguage(tabId) {
              return Promise.resolve({
                tabId: tabId
              });
            },
            discard: function discard(tabIds) {
              return Promise.resolve({
                tabIds: tabIds
              });
            },
            duplicate: function duplicate(tabId) {
              return Promise.resolve({
                tabId: tabId
              });
            },
            executeScript: function executeScript(tabId, details) {
              return Promise.resolve({
                tabId: tabId,
                details: details
              });
            },
            get: function get(tabId) {
              return Promise.resolve({
                tabId: tabId
              });
            },
            getAllInWindow: function getAllInWindow(windowId) {
              return Promise.resolve({
                windowId: windowId
              });
            },
            getCurrent: function getCurrent() {
              return Promise.resolve(true);
            },
            getZoom: function getZoom(tabId) {
              return Promise.resolve({
                tabId: tabId
              });
            },
            getZoomSettings: function getZoomSettings(tabId) {
              return Promise.resolve({
                tabId: tabId
              });
            },
            hide: function hide(tabIds) {
              return Promise.resolve({
                tabIds: tabIds
              });
            },
            insertCSS: function insertCSS(tabId, details) {
              return Promise.resolve({
                tabId: tabId,
                details: details
              });
            },
            move: function move(tabIds, moveProperties) {
              return Promise.resolve({
                tabIds: tabIds,
                moveProperties: moveProperties
              });
            },
            print: function print() {
              return true;
            },
            printPreview: function printPreview() {
              return Promise.resolve(true);
            },
            query: function query(queryInfo) {
              return Promise.resolve({
                queryInfo: queryInfo
              });
            },
            reload: function reload(tabId, reloadProperties) {
              return Promise.resolve({
                tabId: tabId,
                reloadProperties: reloadProperties
              });
            },
            remove: function remove(tabIds) {
              return Promise.resolve({
                tabIds: tabIds
              });
            },
            removeCSS: function removeCSS(tabId, details) {
              return Promise.resolve({
                tabId: tabId,
                details: details
              });
            },
            saveAsPDF: function saveAsPDF(pageSettings) {
              return Promise.resolve({
                pageSettings: pageSettings
              });
            },
            sendMessage: function sendMessage(tabId, message, options) {
              return Promise.resolve({
                tabId: tabId,
                message: message,
                options: options
              });
            },
            setZoom: function setZoom(tabId, zoomFactor) {
              return Promise.resolve({
                tabId: tabId,
                zoomFactor: zoomFactor
              });
            },
            show: function show(tabIds) {
              return Promise.resolve({
                tabIds: tabIds
              });
            },
            toggleReaderMode: function toggleReaderMode(tabId) {
              return Promise.resolve({
                tabId: tabId
              });
            },
            update: function update(tabId, updateProperties) {
              return Promise.resolve({
                tabId: tabId,
                updateProperties: updateProperties
              });
            } // endregion

          }
        }
      }
    }); // region Events
    // endregion
    // region Methods

    describe('captureTab', function () {
      it('should return promise', function () {
        tabs.captureTab(1, {
          format: _tabs.ImageFormat.JPEG,
          quality: 100
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            options: {
              format: _tabs.ImageFormat.JPEG,
              quality: 100
            }
          });
        });
      });
    });
    describe('captureVisibleTab', function () {
      it('should return promise', function () {
        return tabs.captureVisibleTab(1, {
          format: _tabs.ImageFormat.JPEG,
          quality: 100
        }).then(function (result) {
          expect(result).toEqual({
            windowId: 1,
            options: {
              format: _tabs.ImageFormat.JPEG,
              quality: 100
            }
          });
        });
      });
    });
    describe('connect', function () {
      it('should return instance', function () {
        var port = tabs.connect(1, {
          name: 'test',
          frameId: 2
        });
        expect(port instanceof _port.Port).toBeTruthy();
        expect(port.name).toBe('test');
        expect(port.sender instanceof _port.MessageSender).toBeTruthy();
        expect(port.sender.frameId).toBe(2);
        expect(port.sender.id).toBe(1);
      });
      it('should return null if no port is returned', function () {
        var tabs = new _tabs.Tabs({
          browser: {
            title: 'Chrome',
            name: 'chrome',
            version: '54.0',
            promises: false,
            namespace: {
              tabs: {
                connect: function connect() {
                  return null;
                }
              }
            }
          }
        });
        expect(tabs.connect(1, {
          name: 'test'
        })).toBeNull();
      });
    });
    describe('create', function () {
      it('should return promise', function () {
        return tabs.create('createProperties').then(function (result) {
          expect(result).toEqual({
            createProperties: 'createProperties'
          });
        });
      });
    });
    describe('detectLanguage', function () {
      it('should return promise', function () {
        return tabs.detectLanguage(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('discard', function () {
      it('should return promise', function () {
        return tabs.discard(1).then(function (result) {
          expect(result).toEqual({
            tabIds: 1
          });
        });
      });
    });
    describe('duplicate', function () {
      it('should return promise', function () {
        return tabs.duplicate(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('executeScript', function () {
      it('should return promise', function () {
        return tabs.executeScript(1, {
          allFrames: true
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            details: {
              allFrames: true
            }
          });
        });
      });
    });
    describe('get', function () {
      it('should return promise', function () {
        return tabs.get(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('getAllInWindow', function () {
      it('should return promise', function () {
        return tabs.getAllInWindow(1).then(function (result) {
          expect(result).toEqual({
            windowId: 1
          });
        });
      });
    });
    describe('getCurrent', function () {
      it('should return promise', function () {
        return tabs.getCurrent().then(function (result) {
          expect(result).toBe(true);
        });
      });
    });
    describe('getSelected', function () {
      it('should reject with unsupported error', function (done) {
        tabs.getSelected(1).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.getSelected is not available (not implemented)');
          done();
        });
      });
    });
    describe('getZoom', function () {
      it('should return promise', function () {
        return tabs.getZoom(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('getZoomSettings', function () {
      it('should return promise', function () {
        return tabs.getZoomSettings(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('hide', function () {
      it('should return promise', function () {
        return tabs.hide(1).then(function (result) {
          expect(result).toEqual({
            tabIds: 1
          });
        });
      });
    });
    describe('highlight', function () {
      it('should reject with unsupported error', function (done) {
        tabs.highlight({
          tabs: 1
        }).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.highlight is not available (not implemented)');
          done();
        });
      });
    });
    describe('insertCSS', function () {
      it('should return promise', function () {
        return tabs.insertCSS(1, {
          code: 'code'
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            details: {
              code: 'code'
            }
          });
        });
      });
    });
    describe('move', function () {
      it('should return promise', function () {
        return tabs.move(1, {
          index: 2
        }).then(function (result) {
          expect(result).toEqual({
            tabIds: 1,
            moveProperties: {
              index: 2
            }
          });
        });
      });
    });
    describe('print', function () {
      it('should call function', function () {
        tabs.print();
      });
    });
    describe('printPreview', function () {
      it('should return promise', function () {
        return tabs.printPreview().then(function (result) {
          expect(result).toBe(true);
        });
      });
    });
    describe('query', function () {
      it('should return promise', function () {
        return tabs.query({
          active: true
        }).then(function (result) {
          expect(result).toEqual({
            queryInfo: {
              active: true
            }
          });
        });
      });
    });
    describe('reload', function () {
      it('should return promise', function () {
        return tabs.reload(1, {
          bypassCache: false
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            reloadProperties: {
              bypassCache: false
            }
          });
        });
      });
    });
    describe('remove', function () {
      it('should return promise', function () {
        return tabs.remove(1).then(function (result) {
          expect(result).toEqual({
            tabIds: 1
          });
        });
      });
    });
    describe('removeCSS', function () {
      it('should return promise', function () {
        return tabs.removeCSS(1, {
          code: 'code'
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            details: {
              code: 'code'
            }
          });
        });
      });
    });
    describe('saveAsPDF', function () {
      it('should return promise', function () {
        return tabs.saveAsPDF({
          scaling: 1
        }).then(function (result) {
          expect(result).toEqual({
            pageSettings: {
              scaling: 1
            }
          });
        });
      });
    });
    describe('sendMessage', function () {
      it('should return promise', function () {
        return tabs.sendMessage(1, 'message', {
          frameId: 1
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            message: 'message',
            options: {
              frameId: 1
            }
          });
        });
      });
    });
    describe('sendRequest', function () {
      it('should reject with unsupported error', function (done) {
        tabs.sendRequest(1, 'request').then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.sendRequest is not available (not implemented)');
          done();
        });
      });
    });
    describe('setZoom', function () {
      it('should return promise', function () {
        return tabs.setZoom(1, 1).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            zoomFactor: 1
          });
        });
      });
    });
    describe('setZoomSettings', function () {
      it('should reject with unsupported error', function (done) {
        tabs.setZoomSettings(1, {
          defaultZoomFactor: 1
        }).then(function () {
          done.fail('Promise wasn\'t rejected');
        }, function (err) {
          expect(err.message).toBe('tabs.setZoomSettings is not available (not implemented)');
          done();
        });
      });
    });
    describe('show', function () {
      it('should return promise', function () {
        return tabs.show(1).then(function (result) {
          expect(result).toEqual({
            tabIds: 1
          });
        });
      });
    });
    describe('toggleReaderMode', function () {
      it('should return promise', function () {
        return tabs.toggleReaderMode(1).then(function (result) {
          expect(result).toEqual({
            tabId: 1
          });
        });
      });
    });
    describe('update', function () {
      it('should return promise', function () {
        return tabs.update(1, {
          active: true
        }).then(function (result) {
          expect(result).toEqual({
            tabId: 1,
            updateProperties: {
              active: true
            }
          });
        });
      });
    }); // endregion
  });
});