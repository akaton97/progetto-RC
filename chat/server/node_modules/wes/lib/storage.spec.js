"use strict";

var _storage = require("./storage");

describe('StorageChange', function () {
  describe('Chrome', function () {
    var change = new _storage.StorageChange({
      oldValue: 'oldValue',
      newValue: 'newValue'
    }, {
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false
      }
    });
    describe('oldValue', function () {
      it('should return value', function () {
        expect(change.oldValue).toBe('oldValue');
      });
    });
    describe('newValue', function () {
      it('should return value', function () {
        expect(change.newValue).toBe('newValue');
      });
    });
  });
  describe('Firefox', function () {
    var change = new _storage.StorageChange({
      oldValue: 'oldValue',
      newValue: 'newValue'
    }, {
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    });
    describe('oldValue', function () {
      it('should return value', function () {
        expect(change.oldValue).toBe('oldValue');
      });
    });
    describe('newValue', function () {
      it('should return value', function () {
        expect(change.newValue).toBe('newValue');
      });
    });
  });
});
describe('StorageArea', function () {
  describe('Chrome', function () {
    var area = new _storage.StorageArea({
      clear: function clear(callback) {
        return callback(true);
      },
      get: function get(keys, callback) {
        return callback({
          keys: keys
        });
      },
      getBytesInUse: function getBytesInUse(keys, callback) {
        return callback({
          keys: keys
        });
      },
      remove: function remove(keys, callback) {
        return callback({
          keys: keys
        });
      },
      set: function set(keys, callback) {
        return callback({
          keys: keys
        });
      }
    }, {
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false
      }
    });
    describe('clear', function () {
      it('should return promise', function () {
        return area.clear().then(function (result) {
          expect(result).toBe(true);
        });
      });
    });
    describe('get', function () {
      it('should return promise', function () {
        return area.get(['key']).then(function (result) {
          expect(result).toEqual({
            keys: ['key']
          });
        });
      });
    });
    describe('getBytesInUse', function () {
      it('should return promise', function () {
        return area.getBytesInUse(['key']).then(function (result) {
          expect(result).toEqual({
            keys: ['key']
          });
        });
      });
    });
    describe('remove', function () {
      it('should return promise', function () {
        return area.remove(['key']).then(function (result) {
          expect(result).toEqual({
            keys: ['key']
          });
        });
      });
    });
    describe('set', function () {
      it('should return promise', function () {
        return area.set({
          key: 'value'
        }).then(function (result) {
          expect(result).toEqual({
            keys: {
              key: 'value'
            }
          });
        });
      });
    });
  });
  describe('Firefox', function () {
    var area = new _storage.StorageArea({
      clear: function clear() {
        return Promise.resolve(true);
      },
      get: function get(keys) {
        return Promise.resolve({
          keys: keys
        });
      },
      getBytesInUse: function getBytesInUse(keys) {
        return Promise.resolve({
          keys: keys
        });
      },
      remove: function remove(keys) {
        return Promise.resolve({
          keys: keys
        });
      },
      set: function set(keys) {
        return Promise.resolve({
          keys: keys
        });
      }
    }, {
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    });
    describe('clear', function () {
      it('should return promise', function () {
        return area.clear().then(function (result) {
          expect(result).toBe(true);
        });
      });
    });
    describe('get', function () {
      it('should return promise', function () {
        return area.get(['key']).then(function (result) {
          expect(result).toEqual({
            keys: ['key']
          });
        });
      });
    });
    describe('getBytesInUse', function () {
      it('should return promise', function () {
        return area.getBytesInUse(['key']).then(function (result) {
          expect(result).toEqual({
            keys: ['key']
          });
        });
      });
    });
    describe('remove', function () {
      it('should return promise', function () {
        return area.remove(['key']).then(function (result) {
          expect(result).toEqual({
            keys: ['key']
          });
        });
      });
    });
    describe('set', function () {
      it('should return promise', function () {
        return area.set({
          key: 'value'
        }).then(function (result) {
          expect(result).toEqual({
            keys: {
              key: 'value'
            }
          });
        });
      });
    });
  });
});
describe('Storage', function () {
  describe('Chrome', function () {
    var storage = new _storage.Storage({
      browser: {
        title: 'Chrome',
        name: 'chrome',
        version: '54.0',
        promises: false
      }
    }); // region Properties

    describe('local', function () {
      it('should return instance', function () {
        expect(storage.local instanceof _storage.StorageArea).toBeTruthy();
      });
    });
    describe('managed', function () {
      it('should return instance', function () {
        expect(storage.managed instanceof _storage.StorageArea).toBeTruthy();
      });
    });
    describe('sync', function () {
      it('should return instance', function () {
        expect(storage.sync instanceof _storage.StorageArea).toBeTruthy();
      });
    }); // endregion
  });
  describe('Firefox', function () {
    var storage = new _storage.Storage({
      browser: {
        title: 'Firefox',
        name: 'firefox',
        version: '54.0',
        promises: true
      }
    }); // region Properties

    describe('local', function () {
      it('should return instance', function () {
        expect(storage.local instanceof _storage.StorageArea).toBeTruthy();
      });
    });
    describe('managed', function () {
      it('should return instance', function () {
        expect(storage.managed instanceof _storage.StorageArea).toBeTruthy();
      });
    });
    describe('sync', function () {
      it('should return instance', function () {
        expect(storage.sync instanceof _storage.StorageArea).toBeTruthy();
      });
    }); // endregion
  });
});