"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "WebRequestCompatibility", {
  enumerable: true,
  get: function get() {
    return _webRequest.default;
  }
});
exports.default = exports.WebRequest = void 0;

var _webRequest = _interopRequireDefault(require("mdn-browser-compat-data/webextensions/api/webRequest"));

var _base = _interopRequireDefault(require("./core/base"));

var _event = _interopRequireDefault(require("./core/event"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebRequest =
/*#__PURE__*/
function (_Base) {
  _inherits(WebRequest, _Base);

  function WebRequest() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, WebRequest);

    _this = _possibleConstructorReturn(this, (WebRequest.__proto__ || Object.getPrototypeOf(WebRequest)).call(this, options)); // region Events

    _this.onBeforeRequest = new _event.default(_this, 'onBeforeRequest');
    _this.onBeforeRedirect = new _event.default(_this, 'onBeforeRedirect');
    _this.onBeforeSendHeaders = new _event.default(_this, 'onBeforeSendHeaders');
    _this.onSendHeaders = new _event.default(_this, 'onSendHeaders');
    _this.onHeadersReceived = new _event.default(_this, 'onHeadersReceived');
    _this.onAuthRequired = new _event.default(_this, 'onAuthRequired');
    _this.onCompleted = new _event.default(_this, 'onCompleted');
    _this.onErrorOccurred = new _event.default(_this, 'onErrorOccurred');
    _this.onResponseStarted = new _event.default(_this, 'onResponseStarted'); // endregion

    return _this;
  }

  return WebRequest;
}(_base.default);

exports.WebRequest = WebRequest;
Object.defineProperty(WebRequest, "Title", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'WebRequest'
});
Object.defineProperty(WebRequest, "Name", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'webRequest'
});
Object.defineProperty(WebRequest, "Compatibility", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: _webRequest.default
});

var _default = new WebRequest();

exports.default = _default;